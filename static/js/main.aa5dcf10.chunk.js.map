{"version":3,"sources":["logo.svg","img/jumbotronSquare.jpg","img/covid-pro-tips.png","img/unite-neat.png","img/vitality.jpg","components/Card.js","pages/Projects.js","pages/About.js","pages/Gallery.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProjectCard","element","this","props","buttons","map","object","Card","Link","href","link","name","style","width","Img","variant","src","imgSrc","Body","Title","title","Text","description","Component","Projects","Jumbotron","className","Image","id","Background","roundedCircle","fluid","Container","Row","Col","display","justifyContent","require","About","Gallery","Footer","App","Navbar","bg","expand","Brand","logo","height","alt","Toggle","aria-controls","Collapse","Nav","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa5dcf10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9ecb9acd.svg\";","module.exports = __webpack_public_path__ + \"static/media/jumbotronSquare.0bac8c0b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/covid-pro-tips.a7dd8ade.png\";","module.exports = __webpack_public_path__ + \"static/media/unite-neat.acda77bb.png\";","module.exports = __webpack_public_path__ + \"static/media/vitality.899d6e89.jpg\";","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nclass ProjectCard extends Component {\r\n    render() {\r\n        let element = this.props.buttons.map(function (object) { // for each element in the Roles array, display it https://stackoverflow.com/questions/37997893/promise-error-objects-are-not-valid-as-a-react-child\r\n            return (\r\n                <Card.Link href={object.link}>{object.name}</Card.Link>\r\n            );\r\n        })\r\n        return (\r\n            <Card style={{ width: '20rem' }}>\r\n                <Card.Img variant=\"top\" src={this.props.imgSrc} />\r\n                <Card.Body>\r\n                    <Card.Title>{this.props.title}</Card.Title>\r\n                    <Card.Text>\r\n                        {this.props.description}\r\n                    </Card.Text>\r\n\r\n                    {element}\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProjectCard;","import React from \"react\";\r\nimport ProjectCard from \"../components/Card.js\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Image from \"react-bootstrap/Image\";\r\n\r\nimport Background from \"../img/jumbotronSquare.jpg\";\r\n\r\nfunction Projects(props) {\r\n    return (\r\n        <Jumbotron className=\"bg-transparent jumbotron-fluid p-0\">\r\n            <Image id = \"profile\" className = \"py-5\" src={Background} roundedCircle fluid/>\r\n            <Container fluid>\r\n                <Row className=\"justify-content-center\" >\r\n                    <Col>\r\n                        <h1 className=\"display-1 font-weight-bolder\" >Jason Zhang</h1>\r\n                        <h3 className=\"display-4 font-weight-light\">My Projects</h3>\r\n                        <h3 className=\"lead font-weight-light\">Eastlake 2021</h3>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Container fluid className = \"py-5\">\r\n                <Row>\r\n                    <Col style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <ProjectCard\r\n                            title=\"Covid Pro-Tips\"\r\n                            description=\"Responsive, interactive, and professional website hosted with a Node.js server running on an AWS Ubuntu EC2 instance fetching and displaying live Covid-19 data along interactive maps and datatables.\"\r\n                            imgSrc={require(\"../img/covid-pro-tips.png\")}\r\n                            buttons={[\r\n                                { name: \"Repo\", link: \"https://github.com/Zjjc123/Covid-Pro-Tips\" },\r\n                                { name: \"Website\", link: \"https://www.webcovid-19.live\" }\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                    <Col style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <ProjectCard\r\n                            title=\"Unite NEAT\"\r\n                            description=\"Neural Evolution of Augmenting Topologies Implementation. Using Unity easy Graphical Implementations\"\r\n                            imgSrc={require(\"../img/unite-neat.png\")}\r\n                            buttons={[\r\n                                { name: \"Repo\", link: \"https://github.com/Zjjc123/UniteNEAT\" },\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                    <Col style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <ProjectCard\r\n                            title=\"Vitality\"\r\n                            description=\"Mobile Fitness App built on Android Studio that provides a variety of health-related functionalities like heart rate monitoring and fitness counters. Complete with a minimalistic UI, profile settings, and pinned notifications.\"\r\n                            imgSrc={require(\"../img/vitality.jpg\")}\r\n                            buttons={[\r\n                                { name: \"Repo\", link: \"https://github.com/Zjjc123/Vitality\" },\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default Projects;","import React from \"react\"\r\n \r\nfunction About(props) {\r\n  return (\r\n    <div>\r\n      <h1>About</h1>\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default About;","import React from \"react\"\r\n \r\nfunction Gallery(props) {\r\n  return (\r\n    <div>\r\n      <h1>Gallery</h1>\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default Gallery;","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className = 'sticky-bottom'>\r\n            <Container fluid = {true}>\r\n                <Row className = \"border-top justify-content-between p-3\">\r\n                    <Col className = \"p-0 d-flex justify-content-center\">\r\n                        Jason Zhang 2020\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { BrowserRouter, Route} from 'react-router-dom';\r\nimport Projects from './pages/Projects.js';\r\nimport About from './pages/About.js';\r\nimport Gallery from './pages/Gallery.js';\r\n\r\nimport Footer from './components/Footer.js';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Navbar.Brand href=\"/\">\r\n            <img\r\n              src= {logo}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n              alt=\"Logo\"\r\n            />\r\n          </Navbar.Brand>\r\n          <Navbar.Brand href=\"/\">Jason Zhang</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"ml-auto\">\r\n              <Nav.Link href=\"/\">Projects</Nav.Link>\r\n              <Nav.Link href=\"/About\">About</Nav.Link>\r\n              <Nav.Link href=\"/Gallery\">Gallery</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Route exact path=\"/\" component={Projects} />\r\n        <Route path=\"/About\" component={About} />\r\n        <Route path=\"/Gallery\" component={Gallery} />\r\n\r\n        <Footer/>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}